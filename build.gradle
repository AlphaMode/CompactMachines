plugins {
    id "fabric-loom" version "0.12-SNAPSHOT"
    id "maven-publish"
    id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
    id "idea"
    id "eclipse"
}

def semver = System.getenv("CM_SEMVER_VERSION")
def buildNumber = System.getenv("CM_BUILD_NUM")

def nightlyVersion = "${semver}.${buildNumber}"
def isRelease = (System.getenv("CM_RELEASE") ?: "false").equalsIgnoreCase("true")

task getBuildInfo() {
    println("Mod ID: ${mod_id}")
    println("Version: ${isRelease ? semver : nightlyVersion}")
    println("Semver Version: ${semver}")
    println("Nightly Build: ${nightlyVersion}")
}

version = (isRelease ? "${semver}" : nightlyVersion) + "-fabric"
group = "dev.compactmods"
archivesBaseName = mod_id

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://modmaven.dev" }
    // TheOneProbe
    maven { url "https://maven.wispforest.io" }
    // for config
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url = "https://jitpack.io/" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.cafeteria.dev/releases/" }
    maven { url "https://ladysnake.jfrog.io/artifactory/mods" }
}

loom {
    accessWidenerPath = file("src/main/resources/compactmachines.accesswidener")
    sourceSets {
        api {
            resources.srcDirs = []
        }
        datagen {
            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
        tunnels {
            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output
        }
        main {
            java {
                srcDir "src/main/java"
            }

            resources {
                srcDir "src/main/resources"
                srcDir "src/generated/resources"
            }

            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output
            compileClasspath += sourceSets.tunnels.output
            runtimeClasspath += sourceSets.tunnels.output
        }
        test {
            java { srcDir "src/test/java" }
            resources { srcDir "src/test/resources" }

            compileClasspath += sourceSets.api.output
            runtimeClasspath += sourceSets.api.output
        }
    }

    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=compactmachines"
            // from ae2
            property "dev.compactmods.machines.datagen.existingData", file("src/main/resources").absolutePath

            runDir "build/datagen"
        }
        gametest {
            server()
            name = "Game Test"
            vmArg "-Dfabric-api.gametest.server=true"
        }
    }
}

configurations {
    apiImplementation.extendsFrom(compileClasspath)
    datagenImplementation.extendsFrom(compileClasspath)
    tunnelsImplementation.extendsFrom(compileClasspath)
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings loom.officialMojangMappings()
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}.${project.port_lib_hash}"))
    modImplementation(include("me.alphamode:ForgeTags:${project.forge_tags_version}"))

    // REI
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    // JEI
    modCompileOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") { transitive = false }

    include modApi('teamreborn:energy:2.2.0') {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation(include("com.electronwill.night-config:core:${project.night_config_core_version}"))
    modImplementation(include("com.electronwill.night-config:toml:${project.night_config_toml_version}"))
    modImplementation(include("net.minecraftforge:forgeconfigapiport-fabric:${project.config_api_version}"))

    // The One Probe
    modImplementation("mcjty.theoneprobe:theoneprobe-fabric:${top_version}")
//    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
//    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

    // Nicephore - Screenshots and Stuff
    modRuntimeOnly("curse.maven:nicephore-fabric-405990:3848375")

    // Shut up Experimental Settings - so we don't have to deal with that CONSTANTLY
    modRuntimeOnly("curse.maven:fabric-disable-custom-worlds-advice-401978:3827588")


    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}"

//    // Testing Mods - Trash Cans, Pipez, Create, Refined Pipes, Pretty Pipes, Refined Storage
//    runtimeOnly(fg.deobf("curse.maven:SuperMartijn642-454372:3649270"))
//    runtimeOnly(fg.deobf("curse.maven:trashcans-394535:3597654"))
//    runtimeOnly(fg.deobf("curse.maven:pipez-443900:3569514"))
//    runtimeOnly(fg.deobf("curse.maven:flywheel-486392:3687357"))
//    modRuntimeOnly("com.simibubi:Create:mc1.18.2_v0.5.0+665")
//    runtimeOnly(fg.deobf("curse.maven:refinedpipes-370696:3570151"))
//    runtimeOnly(fg.deobf("curse.maven:prettypipes-376737:3573145"))
//    runtimeOnly(fg.deobf("curse.maven:refinedstorage-243076:3623324"))
//
//    // Scalable Cat's Force, BdLib, Advanced Generators
//    runtimeOnly(fg.deobf("curse.maven:scalable-320926:3634756"))
//    runtimeOnly(fg.deobf("curse.maven:bdlib-70496:3663149"))
//    runtimeOnly(fg.deobf("curse.maven:advgen-223622:3665335"))
//
//    // Immersive Eng - 7.1.0-145 (Dec 31)
//    runtimeOnly(fg.deobf("curse.maven:immersiveeng-231951:3587149"))

    // Mekanism + Mek Generators - Tunnel testing
//    runtimeOnly(fg.deobf("curse.maven:mekanism-268560:3206392"))
//    runtimeOnly(fg.deobf("curse.maven:mekanismgenerators-268566:3206395"))
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    exclude("**/*.bbmodel", "**/*.lnk")

    Map<String, String> properties = new HashMap<>()
    properties.put("version", project.version)
    properties.put("loader_version", project.loader_version)
    properties.put("fabric_version", project.fabric_version)
    properties.put("minecraft_version", project.minecraft_version)
    properties.put("port_lib_version", "${project.port_lib_version}+${project.minecraft_version}.${project.port_lib_hash}")

    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

jar {
    from sourceSets.tunnels.output
    from sourceSets.main.output
    from sourceSets.api.output
    destinationDirectory = file("$rootDir/build-out")

    finalizedBy('remapJar')

    manifest {
        attributes([
                "Specification-Title"     : "Compact Machines",
                "Specification-Vendor"    : "",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : "",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    // Sources included because of MinecraftForge/ForgeGradle#369
    archiveClassifier = 'api'
    destinationDirectory = file("$rootDir/build-out")
}

artifacts {
    archives jar, apiJar
}

publishing {
    publications {
        release(MavenPublication) {
            artifactId = mod_id
            groupId = "dev.compactmods"

            artifacts {
                artifact jar
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }

        nightly(MavenPublication) {
            artifactId = mod_id
            groupId = "dev.compactmods.nightly"

            artifacts {
                artifact(jar)
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/AlphaMode/CompactMachines-Fabric"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
