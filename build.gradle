buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:5.1.+"
    }
}

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
}

apply plugin: "net.minecraftforge.gradle"

def gitCommitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()
def isRelease = (System.getenv("CM_RELEASE") ?: "false").equalsIgnoreCase("true")

version = isRelease ? mod_version : "nightly-${gitCommitHash}"
group = "dev.compactmods"
archivesBaseName = mod_id

println("Mod ID: ${mod_id}");
println("Version: ${version}");

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    api {
        java {
            srcDir "src/api/java"
        }
        compileClasspath += configurations.getByName("minecraft")
    }

    main {
        java {
            srcDir "src/api/java"
            srcDir "src/main/java"
        }

        resources {
            srcDir "src/main/resources"
            srcDir 'src/generated/resources'
        }
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: minecraft_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--username', 'Dev##'

            mods {
                compactmachines {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                compactmachines {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', mod_id
            args '--existing', file('src/main/resources')
            args '--all'
            args '--output', file('src/generated/resources/')

            mods {
                compactmachines {
                    source sourceSets.main
                }
            }
        }
    }
}

def getModVersion(filename) {
    // println(filename);
    def pattern = /^(?<modid>[^-]+)(?:-(?<mcversion>[0-9.]+))?(?:-(?<modver>[0-9.\-]+))\.jar$/;

    def matcher = filename =~ pattern

    def found = matcher.find()

    if (found) {
        def mod = matcher.group("modid");

        // Extract MC version or default
        def mcVersion = matcher.group("mcversion");

        // Extract mod version
        def version = matcher.group("modver");

        // println("> mod: ${mod}; mc: ${mcVersion}; version: ${version}");

        if (mcVersion == null)
            return "${mod}:${mod}:${version}";
        else
            return "${mod}:${mod}-${mcVersion}:${version}";

    } else {
        println("> not a mod filename")
        return filename;
    }
}

def dev_mods_dir = "mods"

task("dev") {
    println(sourceSets.main.output.classesDirs[0]);
}
repositories {
    // Built mods
    flatDir {
        dirs dev_mods_dir
    }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // location of the maven that hosts JEI files
    maven {
        name "Progwml Repo"
        url "https://dvs1.progwml6.com/files/maven"
    }

    // TheOneProbe
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
}

def dev_mods = fileTree(dev_mods_dir).filter { it -> it.isFile() }.files.name.collect({ getModVersion(it) })

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"


    // Deobfuscate each dev mod for runtime
    dev_mods.each { implementation(fg.deobf(it)) }


    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}")

    // The One Probe
//    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
//    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

//    testImplementation(fg.deobf("com.github.alcatrazEscapee:mcjunitlib:1.3.3-${minecraft_version}"))

    // Nicephore - Screenshots and Stuff
//    runtimeOnly(fg.deobf("curse.maven:nicephore-401014:3318114"))

    // Mekanism + Mek Generators - Tunnel testing
//    runtimeOnly(fg.deobf("curse.maven:mekanism-268560:3206392"))
//    runtimeOnly(fg.deobf("curse.maven:mekanismgenerators-268566:3206395"))
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.api.output
    from sourceSets.main.output
    destinationDirectory = file("$rootDir/build-out")

    finalizedBy('reobfJar')
    manifest {
        attributes([
                "Specification-Title"     : "compactmachines",
                "Specification-Vendor"    : "",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : isRelease ? archiveVersion : "nightly-${gitCommitHash}",
                "Implementation-Vendor"   : "",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    // Sources included because of MinecraftForge/ForgeGradle#369
    archiveClassifier = 'api'
    destinationDirectory = file("$rootDir/build-out")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

artifacts {
    archives jar, apiJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact jar
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }

        nightlyMaven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact(jar) {
                    group = "dev.compactmods.nightly"
                }
                artifact(apiJar) {
                    classifier = "api"
                }
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/CompactMods/CompactMachines"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

test {
    useJUnitPlatform {
        excludeTags "minecraft"
    }
}
